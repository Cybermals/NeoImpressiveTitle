from argparse import ArgumentParser
from pathlib import Path


# Parse command-line arguments
parser = ArgumentParser()
parser.add_argument("in_folder", type=str, help="a folder containing particle files to bundle")
parser.add_argument("out_file", type=str, help="the path of the particle library to outputs")
args = parser.parse_args()

# Open output file
with open(args.out_file, "w") as out_file:
    # Write header
    out_file.write("""# ===================================
# Generated by NeoIT particle bundler
# ===================================
                   
from direct.particles.ParticleEffect import ParticleEffect
from direct.particles import (
    ForceGroup,
    Particles
)
from panda3d.core import (
    ColorBlendAttrib,
    Point3,
    Vec3,
    Vec4
)
from panda3d.physics import *


# Particle Classes
# ================
""")
    
    # Iterate over particle files
    for path in Path(args.in_folder).iterdir():
        # Skip non-particle files
        if path.suffix != ".ptf":
            continue

        # Write particle class
        out_file.write(f"""class {path.stem}(ParticleEffect):
    def __init__(self, *args, **kwargs):
        # Call base constructor
        ParticleEffect.__init__(self, *args, **kwargs)
                       
        # === Begin Particle Config ===""")
        
        # Open particle file
        with open(path, "r") as in_file:
            # Iterate over particle config lines
            for line in in_file:
                # Copy particle config line to output file with correct indentation
                out_file.write(f"        {line}")

        # End particle class
        out_file.write("""        # === End Particle Config ===


""")
